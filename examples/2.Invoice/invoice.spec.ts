import { expect, it, describe } from "vitest";
import { JsPdfDynamo } from "../../src/jsPdfDynamo";
import * as allParts from './parts.json';

describe("2.Invoice example", () => {
  it("Create invoice", async () => {
    const pdfDynamo = new JsPdfDynamo({
      pageSize: "a4",
      orientation: "portrait",
      unit: "mm",
    });

    const formatter = new Intl.NumberFormat(undefined, { minimumFractionDigits: 2 });

    const commands = [
      // Load the template
      ".include ./examples/2.Invoice/template.txt",
      // Load some sample data. This would normally be generated by an application
      ".include ./examples/2.Invoice/data.txt",
      `.setVar docDate ${new Date().toLocaleDateString()}`,
      // Create the top section of the first page
      ".Do Initialise FirstPageHeader Headings",
    ];

    const total = addParts(commands, allParts.parts, 380, formatter);
    commands.push(`.setVar total ${formatter.format(total)}`,
      ".Do Totals",
      ".ForEachPage NumberPages");

    commands.push(".SavePdf ./examples/2.Invoice/invoice.pdf")

    await pdfDynamo.processCommands(commands);
    expect(true).toBe(true);
  });
});

function addParts(commands: string[], parts: any, maxParts: number, formatter: Intl.NumberFormat): number {
  let result = 0;
  for (let ix = 0; ix < parts.length && ix < maxParts; ix++) {
    const part = parts[ix];
    commands.push(`.setVar partNo ${part.partNumber}`);
    commands.push(`.setVar description ${part.description}`);
    const qty = Math.floor(Math.random() * 8);
    commands.push(`.setVar qty ${qty === 0 ? "On Order" : qty}`);
    commands.push(`.setVar price ${formatter.format(part.price)}`);
    const total = qty * part.price;
    commands.push(`.setVar total ${qty === 0 ? "-" : formatter.format(total)}`);
    commands.push(`.SetVar ix ${ix + 1}`)
    commands.push(`.Do AddPart`);
    result += total;
  }
  return result;
}